{
    "componentChunkName": "component---packages-gatsby-theme-timeline-src-gatsby-theme-blog-core-templates-post-query-js",
    "path": "/markdown-demo/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Timeline","author":"Owen Young","description":"Gatsby theme timeline","keywords":["timeline","gatsby"],"siteUrl":"https://gatsby-theme-timeline.owenyoung.com","telegram":null,"iconUrl":"https://i.imgur.com/jVsw5Oq.png","defaultSocialImageUrl":null,"social":[{"name":"Twitter","url":"https://twitter.com/gatsbyjs","external":null},{"name":"GitHub","url":"https://github.com/gatsbyjs","external":null}],"menuLinks":null,"disqus":null,"utterances":{"repo":"theowenyoung/gatsby-theme-timeline","label":"comment"}}},"blogPost":{"id":"6dbacd38-1568-584c-bd6d-8eaa21f47d15","excerpt":"Overview Philosophy Inline HTML Automatic Escaping for Special Characters Block Elements Paragraphs and Line Breaks Headers Blockquotesâ€¦","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Markdown Demo\",\n  \"date\": \"2020-06-17T00:00:00.000Z\",\n  \"tags\": [\"test\", \"test2\", \"markdown\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#overview\"\n  }, \"Overview\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#philosophy\"\n  }, \"Philosophy\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#html\"\n  }, \"Inline HTML\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#autoescape\"\n  }, \"Automatic Escaping for Special Characters\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#block\"\n  }, \"Block Elements\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#p\"\n  }, \"Paragraphs and Line Breaks\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#header\"\n  }, \"Headers\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#blockquote\"\n  }, \"Blockquotes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#list\"\n  }, \"Lists\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#precode\"\n  }, \"Code Blocks\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#hr\"\n  }, \"Horizontal Rules\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#span\"\n  }, \"Span Elements\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#link\"\n  }, \"Links\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#em\"\n  }, \"Emphasis\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#code\"\n  }, \"Code\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#img\"\n  }, \"Images\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#misc\"\n  }, \"Miscellaneous\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#backslash\"\n  }, \"Backslash Escapes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#autolink\"\n  }, \"Automatic Links\"))))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" This document is itself written using Markdown; you\\ncan \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/projects/markdown/syntax.text\"\n  }, \"see the source for it by adding \\u2018.text\\u2019 to the URL\"), \".\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"h3\", {\n    \"id\": \"philosophy\"\n  }, \"Philosophy\"), mdx(\"p\", null, \"Markdown is intended to be as easy-to-read and easy-to-write as is feasible.\"), mdx(\"p\", null, \"Readability, however, is emphasized above all else. A Markdown-formatted\\ndocument should be publishable as-is, as plain text, without looking\\nlike it\\u2019s been marked up with tags or formatting instructions. While\\nMarkdown\\u2019s syntax has been influenced by several existing text-to-HTML\\nfilters \\u2014 including \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://docutils.sourceforge.net/mirror/setext.html\"\n  }, \"Setext\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.aaronsw.com/2002/atx/\"\n  }, \"atx\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://textism.com/tools/textile/\"\n  }, \"Textile\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://docutils.sourceforge.net/rst.html\"\n  }, \"reStructuredText\"), \",\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.triptico.com/software/grutatxt.html\"\n  }, \"Grutatext\"), \", and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://ettext.taint.org/doc/\"\n  }, \"EtText\"), \" \\u2014 the single biggest source of\\ninspiration for Markdown\\u2019s syntax is the format of plain text email.\"), mdx(\"h2\", {\n    \"id\": \"block-elements\"\n  }, \"Block Elements\"), mdx(\"h3\", {\n    \"id\": \"paragraphs-and-line-breaks\"\n  }, \"Paragraphs and Line Breaks\"), mdx(\"p\", null, \"A paragraph is simply one or more consecutive lines of text, separated\\nby one or more blank lines. (A blank line is any line that looks like a\\nblank line \\u2014 a line containing nothing but spaces or tabs is considered\\nblank.) Normal paragraphs should not be indented with spaces or tabs.\"), mdx(\"p\", null, \"The implication of the \\u201Cone or more consecutive lines of text\\u201D rule is\\nthat Markdown supports \\u201Chard-wrapped\\u201D text paragraphs. This differs\\nsignificantly from most other text-to-HTML formatters (including Movable\\nType\\u2019s \\u201CConvert Line Breaks\\u201D option) which translate every line break\\ncharacter in a paragraph into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<br />\"), \" tag.\"), mdx(\"p\", null, \"When you \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"do\"), \" want to insert a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<br />\"), \" break tag using Markdown, you\\nend a line with two or more spaces, then type return.\"), mdx(\"h3\", {\n    \"id\": \"headers\"\n  }, \"Headers\"), mdx(\"p\", null, \"Markdown supports two styles of headers, \", \"[Setext][1]\", \" and \", \"[atx][2]\", \".\"), mdx(\"p\", null, \"Optionally, you may \\u201Cclose\\u201D atx-style headers. This is purely\\ncosmetic \\u2014 you can use this if you think it looks better. The\\nclosing hashes don\\u2019t even need to match the number of hashes\\nused to open the header. (The number of opening hashes\\ndetermines the header level.)\"), mdx(\"h3\", {\n    \"id\": \"blockquotes\"\n  }, \"Blockquotes\"), mdx(\"p\", null, \"Markdown uses email-style \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" characters for blockquoting. If you\\u2019re\\nfamiliar with quoting passages of text in an email message, then you\\nknow how to create a blockquote in Markdown. It looks best if you hard\\nwrap the text and put a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" before every line:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\\nid sem consectetuer libero luctus adipiscing.\")), mdx(\"p\", null, \"Markdown allows you to be lazy and only put the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" before the first\\nline of a hard-wrapped paragraph:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\\nid sem consectetuer libero luctus adipiscing.\")), mdx(\"p\", null, \"Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\\nadding additional levels of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \":\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is the first level of quoting.\"), mdx(\"blockquote\", {\n    parentName: \"blockquote\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is nested blockquote.\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Back to the first level.\")), mdx(\"p\", null, \"Blockquotes can contain other Markdown elements, including headers, lists,\\nand code blocks:\"), mdx(\"blockquote\", null, mdx(\"h2\", {\n    parentName: \"blockquote\",\n    \"id\": \"this-is-a-header\"\n  }, \"This is a header.\"), mdx(\"ol\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"This is the first list item.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"This is the second list item.\")), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Here\\u2019s some example code:\"), mdx(\"pre\", {\n    parentName: \"blockquote\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"return shell_exec(\\\"echo $input | $markdown_script\\\");\\n\"))), mdx(\"p\", null, \"Any decent text editor should make email-style quoting easy. For\\nexample, with BBEdit, you can make a selection and choose Increase\\nQuote Level from the Text menu.\"), mdx(\"h3\", {\n    \"id\": \"lists\"\n  }, \"Lists\"), mdx(\"p\", null, \"Markdown supports ordered (numbered) and unordered (bulleted) lists.\"), mdx(\"p\", null, \"Unordered lists use asterisks, pluses, and hyphens \\u2014 interchangably\\n\\u2014 as list markers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Red\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Green\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blue\")), mdx(\"p\", null, \"is equivalent to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Red\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Green\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blue\")), mdx(\"p\", null, \"and:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Red\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Green\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blue\")), mdx(\"p\", null, \"Ordered lists use numbers followed by periods:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bird\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"McHale\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Parish\")), mdx(\"p\", null, \"It\\u2019s important to note that the actual numbers you use to mark the\\nlist have no effect on the HTML output Markdown produces. The HTML\\nMarkdown produces from the above list is:\"), mdx(\"p\", null, \"If you instead wrote the list in Markdown like this:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bird\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"McHale\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Parish\")), mdx(\"p\", null, \"or even:\"), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bird\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"McHale\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Parish\")), mdx(\"p\", null, \"you\\u2019d get the exact same HTML output. The point is, if you want to,\\nyou can use ordinal numbers in your ordered Markdown lists, so that\\nthe numbers in your source match the numbers in your published HTML.\\nBut if you want to be lazy, you don\\u2019t have to.\"), mdx(\"p\", null, \"To make lists look nice, you can wrap items with hanging indents:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\\nviverra nec, fringilla in, laoreet vitae, risus.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\\nSuspendisse id sem consectetuer libero luctus adipiscing.\")), mdx(\"p\", null, \"But if you want to be lazy, you don\\u2019t have to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\\nviverra nec, fringilla in, laoreet vitae, risus.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\\nSuspendisse id sem consectetuer libero luctus adipiscing.\")), mdx(\"p\", null, \"List items may consist of multiple paragraphs. Each subsequent\\nparagraph in a list item must be indented by either 4 spaces\\nor one tab:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This is a list item with two paragraphs. Lorem ipsum dolor\\nsit amet, consectetuer adipiscing elit. Aliquam hendrerit\\nmi posuere lectus.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Vestibulum enim wisi, viverra nec, fringilla in, laoreet\\nvitae, risus. Donec sit amet nisl. Aliquam semper ipsum\\nsit amet velit.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Suspendisse id sem consectetuer libero luctus adipiscing.\"))), mdx(\"p\", null, \"It looks nice if you indent every line of the subsequent\\nparagraphs, but here again, Markdown will allow you to be\\nlazy:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This is a list item with two paragraphs.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"This is the second paragraph in the list item. You're\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"only required to indent the first line. Lorem ipsum dolor\\nsit amet, consectetuer adipiscing elit.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Another item in the same list.\"))), mdx(\"p\", null, \"To put a blockquote within a list item, the blockquote\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \"\\ndelimiters need to be indented:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A list item with a blockquote:\"), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is a blockquote\\ninside a list item.\")))), mdx(\"p\", null, \"To put a code block within a list item, the code block needs\\nto be indented \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"twice\"), \" \\u2014 8 spaces or two tabs:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A list item with a code block:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<code goes here>\\n\")))), mdx(\"h3\", {\n    \"id\": \"code-blocks\"\n  }, \"Code Blocks\"), mdx(\"p\", null, \"Pre-formatted code blocks are used for writing about programming or\\nmarkup source code. Rather than forming normal paragraphs, the lines\\nof a code block are interpreted literally. Markdown wraps a code block\\nin both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<pre>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<code>\"), \" tags.\"), mdx(\"p\", null, \"To produce a code block in Markdown, simply indent every line of the\\nblock by at least 4 spaces or 1 tab.\"), mdx(\"p\", null, \"This is a normal paragraph:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"This is a code block.\\n\")), mdx(\"p\", null, \"Here is an example of AppleScript:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"tell application \\\"Foo\\\"\\n    beep\\nend tell\\n\")), mdx(\"p\", null, \"A code block continues until it reaches a line that is not indented\\n(or the end of the article).\"), mdx(\"p\", null, \"Within a code block, ampersands (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \") and angle brackets (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \")\\nare automatically converted into HTML entities. This makes it very\\neasy to include example HTML source code using Markdown \\u2014 just paste\\nit and indent it, and Markdown will handle the hassle of encoding the\\nampersands and angle brackets. For example, this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<div class=\\\"footer\\\">\\n    &copy; 2004 Foo Corporation\\n</div>\\n\")), mdx(\"p\", null, \"Regular Markdown syntax is not processed within code blocks. E.g.,\\nasterisks are just literal asterisks within a code block. This means\\nit\\u2019s also easy to use Markdown to write about Markdown\\u2019s own syntax.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"tell application \\\"Foo\\\"\\n    beep\\nend tell\\n\")), mdx(\"h2\", {\n    \"id\": \"span-elements\"\n  }, \"Span Elements\"), mdx(\"h3\", {\n    \"id\": \"links\"\n  }, \"Links\"), mdx(\"p\", null, \"Markdown supports two style of links: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"inline\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"reference\"), \".\"), mdx(\"p\", null, \"In both styles, the link text is delimited by \", \"[square brackets]\", \".\"), mdx(\"p\", null, \"To create an inline link, use a set of regular parentheses immediately\\nafter the link text\\u2019s closing square bracket. Inside the parentheses,\\nput the URL where you want the link to point, along with an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"optional\"), \"\\ntitle for the link, surrounded in quotes. For example:\"), mdx(\"p\", null, \"This is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://example.com/\"\n  }, \"an example\"), \" inline link.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://example.net/\"\n  }, \"This link\"), \" has no title attribute.\"), mdx(\"h3\", {\n    \"id\": \"emphasis\"\n  }, \"Emphasis\"), mdx(\"p\", null, \"Markdown treats asterisks (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \") and underscores (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \") as indicators of\\nemphasis. Text wrapped with one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \" will be wrapped with an\\nHTML \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<em>\"), \" tag; double \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \"\\u2019s or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \"\\u2019s will be wrapped with an HTML\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<strong>\"), \" tag. E.g., this input:\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"single asterisks\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"single underscores\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"double asterisks\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"double underscores\")), mdx(\"h3\", {\n    \"id\": \"code\"\n  }, \"Code\"), mdx(\"p\", null, \"To indicate a span of code, wrap it with backtick quotes (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"`\"), \").\\nUnlike a pre-formatted code block, a code span indicates code within a\\nnormal paragraph. For example:\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"printf()\"), \" function.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/markdown-demo/","title":"Markdown Demo","tags":["test","test2","markdown","post"],"date":"June 17, 2020","dateISO":"2020-06-17T00:00:00.000Z","datetime":"2020-06-17 00:00","image":null,"imageAlt":null,"socialImage":null,"__typename":"MdxBlogPost"},"previous":{"id":"InstagramPost-b4b53a3a-54aa-5f00-80c2-f1c62f3c3cb8","excerpt":"","slug":"/instagram/b4b53a3a-54aa-5f00-80c2-f1c62f3c3cb8/","title":"#coronavirus #no so bad","date":"April 25, 2020"},"next":{"id":"TweetPost-1311591409032462337","excerpt":"","slug":"/tweet/1311591409032462337/","title":"RT @ProductHuntHi: @theowenyoung FYI, you've been added as a maker of Actionsflow - Automate Workflows on @ProductHunt https://t.co/8mDhOnVâ€¦","date":"October 01, 2020"}},"pageContext":{"basePath":"/","pageType":"detail","id":"6dbacd38-1568-584c-bd6d-8eaa21f47d15","previousId":"InstagramPost-b4b53a3a-54aa-5f00-80c2-f1c62f3c3cb8","nextId":"TweetPost-1311591409032462337","maxWidth":1024,"siteMetadata":null,"locale":"en","hrefLang":"en-US","originalPath":"/markdown-demo/","dateFormat":"MM/DD/YYYY"}},
    "staticQueryHashes": ["1239077767","2744905544","3280999885"]}